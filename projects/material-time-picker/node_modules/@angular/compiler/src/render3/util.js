/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler/src/render3/util", ["require", "exports", "@angular/compiler/src/output/abstract_emitter", "@angular/compiler/src/output/output_ast", "@angular/compiler/src/render3/r3_identifiers"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateForwardRef = exports.convertFromMaybeForwardRefExpression = exports.createMayBeForwardRefExpression = exports.refsToArray = exports.wrapReference = exports.guardedExpression = exports.devOnlyGuardedExpression = exports.jitOnlyGuardedExpression = exports.prepareSyntheticListenerFunctionName = exports.getSafePropertyAccessString = exports.prepareSyntheticListenerName = exports.prepareSyntheticPropertyName = exports.typeWithParameters = void 0;
    var abstract_emitter_1 = require("@angular/compiler/src/output/abstract_emitter");
    var o = require("@angular/compiler/src/output/output_ast");
    var r3_identifiers_1 = require("@angular/compiler/src/render3/r3_identifiers");
    function typeWithParameters(type, numParams) {
        if (numParams === 0) {
            return o.expressionType(type);
        }
        var params = [];
        for (var i = 0; i < numParams; i++) {
            params.push(o.DYNAMIC_TYPE);
        }
        return o.expressionType(type, undefined, params);
    }
    exports.typeWithParameters = typeWithParameters;
    var ANIMATE_SYMBOL_PREFIX = '@';
    function prepareSyntheticPropertyName(name) {
        return "" + ANIMATE_SYMBOL_PREFIX + name;
    }
    exports.prepareSyntheticPropertyName = prepareSyntheticPropertyName;
    function prepareSyntheticListenerName(name, phase) {
        return "" + ANIMATE_SYMBOL_PREFIX + name + "." + phase;
    }
    exports.prepareSyntheticListenerName = prepareSyntheticListenerName;
    function getSafePropertyAccessString(accessor, name) {
        var escapedName = abstract_emitter_1.escapeIdentifier(name, false, false);
        return escapedName !== name ? accessor + "[" + escapedName + "]" : accessor + "." + name;
    }
    exports.getSafePropertyAccessString = getSafePropertyAccessString;
    function prepareSyntheticListenerFunctionName(name, phase) {
        return "animation_" + name + "_" + phase;
    }
    exports.prepareSyntheticListenerFunctionName = prepareSyntheticListenerFunctionName;
    function jitOnlyGuardedExpression(expr) {
        return guardedExpression('ngJitMode', expr);
    }
    exports.jitOnlyGuardedExpression = jitOnlyGuardedExpression;
    function devOnlyGuardedExpression(expr) {
        return guardedExpression('ngDevMode', expr);
    }
    exports.devOnlyGuardedExpression = devOnlyGuardedExpression;
    function guardedExpression(guard, expr) {
        var guardExpr = new o.ExternalExpr({ name: guard, moduleName: null });
        var guardNotDefined = new o.BinaryOperatorExpr(o.BinaryOperator.Identical, new o.TypeofExpr(guardExpr), o.literal('undefined'));
        var guardUndefinedOrTrue = new o.BinaryOperatorExpr(o.BinaryOperator.Or, guardNotDefined, guardExpr, /* type */ undefined, 
        /* sourceSpan */ undefined, true);
        return new o.BinaryOperatorExpr(o.BinaryOperator.And, guardUndefinedOrTrue, expr);
    }
    exports.guardedExpression = guardedExpression;
    function wrapReference(value) {
        var wrapped = new o.WrappedNodeExpr(value);
        return { value: wrapped, type: wrapped };
    }
    exports.wrapReference = wrapReference;
    function refsToArray(refs, shouldForwardDeclare) {
        var values = o.literalArr(refs.map(function (ref) { return ref.value; }));
        return shouldForwardDeclare ? o.fn([], [new o.ReturnStatement(values)]) : values;
    }
    exports.refsToArray = refsToArray;
    function createMayBeForwardRefExpression(expression, forwardRef) {
        return { expression: expression, forwardRef: forwardRef };
    }
    exports.createMayBeForwardRefExpression = createMayBeForwardRefExpression;
    /**
     * Convert a `MaybeForwardRefExpression` to an `Expression`, possibly wrapping its expression in a
     * `forwardRef()` call.
     *
     * If `MaybeForwardRefExpression.forwardRef` is `ForwardRefHandling.Unwrapped` then the expression
     * was originally wrapped in a `forwardRef()` call to prevent the value from being eagerly evaluated
     * in the code.
     *
     * See `packages/compiler-cli/src/ngtsc/annotations/src/injectable.ts` and
     * `packages/compiler/src/jit_compiler_facade.ts` for more information.
     */
    function convertFromMaybeForwardRefExpression(_a) {
        var expression = _a.expression, forwardRef = _a.forwardRef;
        switch (forwardRef) {
            case 0 /* None */:
            case 1 /* Wrapped */:
                return expression;
            case 2 /* Unwrapped */:
                return generateForwardRef(expression);
        }
    }
    exports.convertFromMaybeForwardRefExpression = convertFromMaybeForwardRefExpression;
    /**
     * Generate an expression that has the given `expr` wrapped in the following form:
     *
     * ```
     * forwardRef(() => expr)
     * ```
     */
    function generateForwardRef(expr) {
        return o.importExpr(r3_identifiers_1.Identifiers.forwardRef).callFn([o.fn([], [new o.ReturnStatement(expr)])]);
    }
    exports.generateForwardRef = generateForwardRef;
});
//# sourceMappingURL=data:application/json;base64,